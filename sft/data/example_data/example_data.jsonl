{"sentence": "A member of the African National Congress, Shiceka was a member of the National Assembly and was chosen by President Jacob Zuma as the Minister of Cooperative Governance and Traditional Affairs in May 2009.", "one-stage": {"zero-shot": {"prompt": "class Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values\n\nclass OrganizationBoardMembership(Event):\n\t\"\"\"\n\tDescription: Member(s) of the board for the organization.\n\tExamples: board, member, part, associated, agency, membership, board-appointed, parts, participants, partners, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"to\", \"role\", \"from\", \"title\", \"organization\", \"member\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass GrapeVarietyComposition(Event):\n\t\"\"\"\n\tDescription: The composition of grape varieties in the context of wine.\n\tExamples: wine, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"grape_variety\", \"wine\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass FilmCrewGig(Event):\n\t\"\"\"\n\tDescription: Member of the crew creating an audiovisual work.\n\tExamples: film, director, films, cast, filmmaker, producer, direct, soundtrack, score, produce, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"film\", \"film_crew_role\", \"crewmember\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass SportsTeamSeasonRecord(Event):\n\t\"\"\"\n\tDescription: The season record of a sports team.\n\tExamples: win, loss, victory, tie, finish, show, following, complete, lose, fold, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"team\", \"ties\", \"season\", \"wins\", \"losses\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence.\n\"\"\"\nsentence = \"A member of the African National Congress, Shiceka was a member of the National Assembly and was chosen by President Jacob Zuma as the Minister of Cooperative Governance and Traditional Affairs in May 2009.\"\n"}, "output": "results = [\n\tOrganizationBoardMembership(\"member\")\n]", "prompt_tokenized_length": 672}, "two-stage": {}, "events": [{"type": "OrganizationBoardMembership", "trigger": "member", "pos": [2, 8], "code": "organization_board_membership_event1 = OrganizationBoardMembership(\n\ttrigger = \"member\"\n)", "type_id": "Unknown"}]}
{"sentence": "In addition, NZ Bus and Howick & Eastern are investigating the use of double-decker buses on the Dominion Road, Mount Eden Road, and Botany to downtown routes.", "one-stage": {"zero-shot": {"prompt": "class Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values\n\nclass GroupMembership(Event):\n\t\"\"\"\n\tDescription: Organization, club or musical group to which the subject belongs.\n\tExamples: singer, music, musician, play, concert, performance, singing, sang, sung, sing, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"start\", \"role\", \"end\", \"group\", \"member\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass ProjectParticipation(Event):\n\t\"\"\"\n\tDescription: Event in which a person or organization was/is a participant.\n\tExamples: involved, participant, involvement, party, ngage, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"participant\", \"project\", \"from_date\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass TrackContribution(Event):\n\t\"\"\"\n\tDescription: Person or organization that contributed to a subject: co-creator of a creative work or subject.\n\tExamples: as, was, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"contributor\", \"track\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence.\n\"\"\"\nsentence = \"In addition, NZ Bus and Howick & Eastern are investigating the use of double-decker buses on the Dominion Road, Mount Eden Road, and Botany to downtown routes.\"\n"}, "output": "results = []", "prompt_tokenized_length": 522}, "two-stage": {}, "events": []}
{"sentence": "At the age of 15, following in the footsteps of her brother, she joined the pan-Arab Arab Nationalist Movement, originally started in the late 1940s by George Habash, then a medical student at the American University of Beirut.", "one-stage": {"zero-shot": {"prompt": "class Entity:\n\t\"\"\"\n\tThe base class for all entities.\n\t\"\"\"\n\tdef __init__(self, name: str):\n\t\tself.name = name\n\nclass Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str):\n\t\tself.trigger = trigger\n\nclass Education(Event):\n\t\"\"\"\n\tDescription: Educational institution attended by subject.\n\t\"\"\"\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str, # Examples: school, professor, coach, graduate, student, study, master, education, pupil, lecturer, \n\t\tstart_date: List[ Entity ],\n\t\tdegree: List[ Entity ],\n\t\tend_date: List[ Entity ],\n\t\tinstitution: List[ Entity ],\n\t\tstudent: List[ Entity ],\n\t\tspecialization: List[ Entity ],\n\t\tmajor_field_of_study: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger = trigger)\n\t\tself.start_date = start_date\n\t\tself.degree = degree\n\t\tself.end_date = end_date\n\t\tself.institution = institution\n\t\tself.student = student\n\t\tself.specialization = specialization\n\t\tself.major_field_of_study = major_field_of_study\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence. It is important to note that the triggers of the events are confirmed as follows: \"student\" is the trigger of event type \"Education\".\n\"\"\"\nsentence = \"At the age of 15, following in the footsteps of her brother, she joined the pan-Arab Arab Nationalist Movement, originally started in the late 1940s by George Habash, then a medical student at the American University of Beirut.\"\n"}, "output": "results = [\n\tEducation(trigger = \"student\", institution = [Entity(\"American University of Beirut\")], student = [Entity(\"George Habash\")])\n]", "prompt_tokenized_length": 507}, "two-stage": {}, "events": [{"type": "Education", "trigger": "student", "pos": [182, 189], "arguments": [{"role": "institution", "type": "", "name": "American University of Beirut", "pos": [197, 226]}, {"role": "student", "type": "", "name": "George Habash", "pos": [152, 165]}], "code": "education_event1 = Education(\n\ttrigger = \"student\",\n\tinstitution = [\n\t\tEntity(\"American University of Beirut\")\n\t],\n\tstudent = [\n\t\tEntity(\"George Habash\")\n\t]\n)", "type_id": "Unknown"}]}
{"sentence": "When optional Reed–Solomon error correction data are included, the packet can stretch an extra 16 bytes to 204 bytes total.", "one-stage": {"zero-shot": {"prompt": "class Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values\n\nclass MilitaryCommand(Event):\n\t\"\"\"\n\tDescription: Commander of a military unit/army/security service, operation, etc.\n\tExamples: command, order, control, request, commanded, call, commander, demand, commander-in-chief, commanding, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"military_commander\", \"military_combatant\", \"military_conflict\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass GroupMembership(Event):\n\t\"\"\"\n\tDescription: Organization, club or musical group to which the subject belongs.\n\tExamples: singer, music, musician, play, concert, performance, singing, sang, sung, sing, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"start\", \"role\", \"end\", \"group\", \"member\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass SportsTeamRoster(Event):\n\t\"\"\"\n\tDescription: Player of a sport team.\n\tExamples: together, partner, jointly, affiliated, ogether, associate, cooperation, collaboration, collusion, ffiliated, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"number\", \"team\", \"to\", \"position\", \"from\", \"player\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence.\n\"\"\"\nsentence = \"When optional Reed–Solomon error correction data are included, the packet can stretch an extra 16 bytes to 204 bytes total.\"\n"}, "output": "results = []", "prompt_tokenized_length": 556}, "two-stage": {}, "events": []}
{"sentence": "He was raised in Bolton, Lancashire, England, and attended Bolton School, where he was a contemporary of the highly acclaimed actor Ian McKellen.", "one-stage": {"zero-shot": {"prompt": "class Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values\n\nclass TrackContribution(Event):\n\t\"\"\"\n\tDescription: Person or organization that contributed to a subject: co-creator of a creative work or subject.\n\tExamples: as, was, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"contributor\", \"track\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass Education(Event):\n\t\"\"\"\n\tDescription: Educational institution attended by subject.\n\tExamples: school, professor, coach, graduate, student, study, master, education, pupil, lecturer, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"start_date\", \"degree\", \"end_date\", \"institution\", \"student\", \"specialization\", \"major_field_of_study\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass PlaceLived(Event):\n\t\"\"\"\n\tDescription: The place where the person is or has been, resident.\n\tExamples: live, resident, camp, stay, room, lodge, neighbor, occupy, roommate, reside, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"start_date\", \"person\", \"end_date\", \"location\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass DubbingPerformance(Event):\n\t\"\"\"\n\tDescription: Performer of a spoken role in a creative work such as animation, video game, radio drama, or dubbing over.\n\tExamples: feature, dub, character, as, co-star, be, casted, role, association, ubbing, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"actor\", \"film\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence.\n\"\"\"\nsentence = \"He was raised in Bolton, Lancashire, England, and attended Bolton School, where he was a contemporary of the highly acclaimed actor Ian McKellen.\"\n"}, "output": "results = [\n\tEducation(\"school\")\n]", "prompt_tokenized_length": 677}, "two-stage": {}, "events": [{"type": "Education", "trigger": "school", "pos": [66, 72], "code": "education_event1 = Education(\n\ttrigger = \"school\"\n)", "type_id": "Unknown"}]}
{"sentence": "No. 1 Croydon  is a tall building at 12–16 Addiscombe Road, Croydon, Greater London, next to East Croydon station. It was designed by Richard Seifert & Partners and completed in 1970. It has 24 storeys and is 269 feet  high. 'NLA' stood for 'Noble Lowndes Annuities'. It was one of many new buildings constructed in the growing town of Croydon in the 1960s. The development of tall buildings was later encouraged in the 2004 London Plan, which led to the erection of new skyscrapers as Greater London went through a high-rise boom.", "one-stage": {"zero-shot": {"prompt": "class Entity:\n\t\"\"\"\n\tThe base class for all entities.\n\t\"\"\"\n\tdef __init__(self, name: str):\n\t\tself.name = name\n\nclass Relation:\n\t\"\"\"\n\tThe base class for all relations.\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tself.head_entity = head_entity\n\t\tself.tail_entity = tail_entity\n\nclass ProductionCompany(Relation):\n\t\"\"\"\n\tDescription: Company that produced this film, audio or performing arts work.\n\tExamples: (Game of Thrones, HBO), (Saturday Night Live, NBC), (Futurama, Fox network), (Dexter, Showtime), (Hawaii Five-0, CBS), (The Simpsons, Matt Groening), (True Detective, HBO), (Doctor Who, BBC), (Sons of Anarchy, FX), (Thunderbirds, AP Films)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Elevation(Relation):\n\t\"\"\"\n\tDescription: \n\tExamples: (Bull Lake, 358 m), (Greek, 2 km), (Talalpsee, 1086 m), (Hopewell Heights, 190 m), (Irishtown, 601 m), (Jaj, 1,220 meters), (James Island, 145 m), (Kamarkawarai-tepui, 2,400 m), (Kardala, 99 meters), (Katara Pass, 1,705 m)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Distribution(Relation):\n\t\"\"\"\n\tDescription: \n\tExamples: (eel, Japan), (Tyrannidae, Brazil), (Thamnophilidae, Brazil), (Thraupidae, Brazil), (Furnariidae, Brazil), (Dendrocolaptinae, Brazil), (Cotingidae, Brazil), (Ramphastidae, Brazil), (tyrant flycatcher, Brazil), (brown-mantled tamarin, South America)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Sponsor(Relation):\n\t\"\"\"\n\tDescription: Organization or individual that sponsors this item.\n\tExamples: (Logie Awards, TV Week), (Commercial Resupply Service mission, NASA), (Peach Bowl, Chick-fil-A), (Hubble Space Telescope, NASA), (New Orleans Bowl, R+L Carriers), (Commercial Resupply Services, NASA), (Six Nations Championship, Royal Bank of Scotland), (top flight, Aviva), (EuroLeague, Turkish Airlines), (People's Choice Awards, E!)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass LocatedIn(Relation):\n\t\"\"\"\n\tDescription: \n\tExamples: (National Register of Historic Places, United States), (Ontario, Canada), (São Paulo, Brazil), (Victoria, Australia), (census-designated place, United States), (New South Wales, Australia), (California, United States), (Andes, Peru), (FAA, United States), (Norwegian, Norway)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Publisher(Relation):\n\t\"\"\"\n\tDescription: Organization or person responsible for publishing books, periodicals, printed music, podcasts, games or software.\n\tExamples: (Hot 100, Billboard), (Billboard Hot 100, Billboard), (S.H.I.E.L.D., Marvel Comics), (Batman, DC Comics), (Hot Country Songs, Billboard), (Billboard 200, Billboard), (Hot Latin Songs, Billboard), (Weekly Shōnen Jump, Shueisha), (Billboard Hot 100, the Billboard), (Modern Rock Tracks, Billboard)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Creator(Relation):\n\t\"\"\"\n\tDescription: Maker of this creative work or other object (where no more specific property exists).\n\tExamples: (University of Virginia, Thomas Jefferson), (Alaska Railroad, Alaska), (provincial temples, Emperor Shōmu), (Memory of the World Programme, UNESCO), (Shwedagon Pagoda, Myanmar), (Deansgate Square, SimpsonHaugh), (Ku Klux Klan, Nathan Bedford Forrest), (geodesic dome, Buckminster Fuller), (Sokollu Mehmed Pasha Mosque, Mimar Sinan), (Emancipation Memorial, Thomas Ball)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\nclass Occupation(Relation):\n\t\"\"\"\n\tDescription: Occupation of a person; see also \"field of work\" (Property:P101), \"position held\" (Property:P39).\n\tExamples: (Oda Nobunaga, daimyō), (Pelé, footballer), (Muhammad, Islamic prophet), (Aristotle, philosopher), (Plato, philosopher), (Batman, superhero), (Bill Clinton, politician), (Nikolaus, Count Esterházy, Palatine of Hungary), (Julián Bautista, composer), (Rosa García Ascot, composer)\n\t\"\"\"\n\tdef __init__(self, head_entity: Entity, tail_entity: Entity):\n\t\tsuper().__init__(head_entity = head_entity, tail_entity = tail_entity)\n\n\"\"\"\nThis is an object-oriented programming task: some Relation Classes and related Entity Classes are defined above. Please instantiate all the corresponding Relation Objects in the following sentence.\n\"\"\"\nsentence = \"No. 1 Croydon  is a tall building at 12–16 Addiscombe Road, Croydon, Greater London, next to East Croydon station. It was designed by Richard Seifert & Partners and completed in 1970. It has 24 storeys and is 269 feet  high. 'NLA' stood for 'Noble Lowndes Annuities'. It was one of many new buildings constructed in the growing town of Croydon in the 1960s. The development of tall buildings was later encouraged in the 2004 London Plan, which led to the erection of new skyscrapers as Greater London went through a high-rise boom.\"\n"}, "output": "results = [\n\tCreator(Entity(\"No. 1 Croydon\"), Entity(\"Richard Seifert & Partners\")),\n\tLocatedIn(Entity(\"East Croydon station\"), Entity(\"Croydon\")),\n\tLocatedIn(Entity(\"No. 1 Croydon\"), Entity(\"Croydon\")),\n\tLocatedIn(Entity(\"Croydon\"), Entity(\"Greater London\"))\n]", "prompt_tokenized_length": 1900}, "two-stage": {}, "relations": [{"type": "Creator", "head": {"name": "No. 1 Croydon", "type": "Entity", "pos": [0, 13]}, "tail": {"name": "Richard Seifert & Partners", "type": "Entity", "pos": [134, 160]}, "code": "creator_relation1 = Creator(\n\thead_entity = Entity(\"No. 1 Croydon\"),\n\ttail_entity = Entity(\"Richard Seifert & Partners\")\n)", "type_id": "P170"}, {"type": "LocatedIn", "head": {"name": "East Croydon station", "type": "Entity", "pos": [93, 113]}, "tail": {"name": "Croydon", "type": "Entity", "pos": [6, 13]}, "code": "located_in_relation2 = LocatedIn(\n\thead_entity = Entity(\"East Croydon station\"),\n\ttail_entity = Entity(\"Croydon\")\n)", "type_id": "Unknown"}, {"type": "LocatedIn", "head": {"name": "No. 1 Croydon", "type": "Entity", "pos": [0, 13]}, "tail": {"name": "Croydon", "type": "Entity", "pos": [6, 13]}, "code": "located_in_relation3 = LocatedIn(\n\thead_entity = Entity(\"No. 1 Croydon\"),\n\ttail_entity = Entity(\"Croydon\")\n)", "type_id": "Unknown"}, {"type": "LocatedIn", "head": {"name": "Croydon", "type": "Entity", "pos": [6, 13]}, "tail": {"name": "Greater London", "type": "Entity", "pos": [69, 83]}, "code": "located_in_relation4 = LocatedIn(\n\thead_entity = Entity(\"Croydon\"),\n\ttail_entity = Entity(\"Greater London\")\n)", "type_id": "Unknown"}]}
{"sentence": "Expression Of Interest For St Kilda Apartments Ends In $10m Sale\n\nPort Phillip Housing Association and the Victorian State Government have paid $10.1 million for a St Kilda apartment property following an Expressions of Interest campaign which drew more than 150 enquiries, including off-shore interest, necessitating a two stage buyer elimination process. The 6 Tennyson Street site, comprising three apartment buildings, totalling 50 units, on a substantial 2370 square metres of land, sold for $4,200 a square metre. According to selling agency Teska Carson, the campaign drew enquiry and formal interest from local and offshore developers, accommodation operators and investors. \"We expected the property to draw a lot of interest but we were overwhelmed by enquiry and formal expressions of interest requiring a two stage EOI process, with a stage one shortlist and a second stage final competitive process,\" Teska Carson Director Larry Takis said. \"Ultimately it was a great result for the family vendor, which had held the property for more than 80 years, but also a great result for the purchaser which stands to benefit from the property’s enormous upside.", "one-stage": {"zero-shot": {"prompt": "class Entity:\n\t\"\"\"\n\tThe base class for all entities.\n\t\"\"\"\n\tdef __init__(self, name: str):\n\t\tself.name = name\n\nclass Variety(Entity):\n\t\"\"\"\n\tDescription: Scholarly article; Edinb Med J.\n\tExamples: ‘Pearlicious XVIII’, Kentucky Wonder, Jersey Wakefield, biovars\n\t\"\"\"\n\tpass\n\nclass MachineLearningAlgorithm(PhysicalEntity):\n\t\"\"\"\n\tDescription: Type of algorithm.\n\tExamples: CorEx\n\t\"\"\"\n\tpass\n\nclass FinancialAspect(Entity):\n\t\"\"\"\n\tDescription: \n\tExamples: reimbursement\n\t\"\"\"\n\tpass\n\nclass Event(Entity):\n\t\"\"\"\n\tDescription: Objects in time or instantiations of properties in objects (in philosophy).\n\tExamples: World War II, Christmas, World War I, Brexit, Second World War, death, World Cup, election, Super Bowl, Civil War\n\t\"\"\"\n\tpass\n\nclass AvrFlashSize(Entity):\n\t\"\"\"\n\tDescription: \n\tExamples: 128K\n\t\"\"\"\n\tpass\n\nclass GlobalTvSeries(Entity):\n\t\"\"\"\n\tDescription: \n\tExamples: British Got Talent\n\t\"\"\"\n\tpass\n\nclass Allies(Entity):\n\t\"\"\"\n\tDescription: Episode of Stargate Atlantis (S2 E20).\n\tExamples: Unit X, SHIELD, Dark Avengers\n\t\"\"\"\n\tpass\n\nclass MolecularStructure(Entity):\n\t\"\"\"\n\tDescription: Article from 1939.\n\tExamples: planar benzoxazolone system, main-chain conformation\n\t\"\"\"\n\tpass\n\nclass Idiom(Entity):\n\t\"\"\"\n\tDescription: Syntactical, grammatical, or structural form peculiar to a language.\n\tExamples: third wheel, jack of all trades, elephant in the room, eight ball, dirty laundry\n\t\"\"\"\n\tpass\n\nclass CoordinateSystem(PhysicalEntity):\n\t\"\"\"\n\tDescription: System for determining the position of a point.\n\tExamples: NAD 83, latitude, longitude, 4326, CRS, GRS80, State Plane Coordinates, Latitude, Longitude, ZONE\n\t\"\"\"\n\tpass\n\nclass Organization(Entity):\n\t\"\"\"\n\tDescription: Scientific article published on 01 April 1959.\n\tExamples: government, Facebook, Free Software Foundation, Twitter, United States Court of Appeals, Google, Congress, United States District Court, police, CNN\n\t\"\"\"\n\tpass\n\nclass CssVariable(Entity):\n\t\"\"\"\n\tDescription: \n\tExamples: --oc-white, $m-borderColor--primary, $m-textColor--primary, $m-textColor--secondary, color-neutral-0, @border-color-base\n\t\"\"\"\n\tpass\n\nclass Person(Entity):\n\t\"\"\"\n\tDescription: Given name.\n\tExamples: patients, Donald Trump, children, women, user, patient, Trump, President Trump, Barack Obama, people\n\t\"\"\"\n\tpass\n\nclass Engines(Entity):\n\t\"\"\"\n\tDescription: Book by Lyon Sprague de Camp.\n\tExamples: node, internal combustion engines\n\t\"\"\"\n\tpass\n\nclass Location(Entity):\n\t\"\"\"\n\tDescription: Scientific article published on 01 October 1975.\n\tExamples: United States, U.S., California, New York, UK, US, London, Europe, India, China\n\t\"\"\"\n\tpass\n\nclass Superconductor(Entity):\n\t\"\"\"\n\tDescription: Former Canadian alt rock band.\n\tExamples: K$_{x}$Fe$_{2-y}$Se$_{2}$\n\t\"\"\"\n\tpass\n\n\"\"\"\nThis is an object-oriented programming task: some Entity Classes are defined above. Please instantiate all the corresponding Entity Objects in the following sentence.\n\"\"\"\nsentence = \"Expression Of Interest For St Kilda Apartments Ends In $10m Sale\n\nPort Phillip Housing Association and the Victorian State Government have paid $10.1 million for a St Kilda apartment property following an Expressions of Interest campaign which drew more than 150 enquiries, including off-shore interest, necessitating a two stage buyer elimination process. The 6 Tennyson Street site, comprising three apartment buildings, totalling 50 units, on a substantial 2370 square metres of land, sold for $4,200 a square metre. According to selling agency Teska Carson, the campaign drew enquiry and formal interest from local and offshore developers, accommodation operators and investors. \"We expected the property to draw a lot of interest but we were overwhelmed by enquiry and formal expressions of interest requiring a two stage EOI process, with a stage one shortlist and a second stage final competitive process,\" Teska Carson Director Larry Takis said. \"Ultimately it was a great result for the family vendor, which had held the property for more than 80 years, but also a great result for the purchaser which stands to benefit from the property’s enormous upside.\"\n"}, "output": "results = [\n\tOrganization(\"Port Phillip Housing Association\"),\n\tOrganization(\"Victorian State Government\"),\n\tOrganization(\"Teska Carson\"),\n\tEvent(\"Expressions of Interest\"),\n\tLocation(\"St Kilda\"),\n\tLocation(\"Tennyson Street\"),\n\tPerson(\"Larry Takis\")\n]", "prompt_tokenized_length": 1352}, "two-stage": {}, "entities": [{"type": "organization", "name": "Port Phillip Housing Association", "name_qid": "Unknown", "type_qid": "Q78651044", "pos": ""}, {"type": "organization", "name": "Victorian State Government", "name_qid": "Unknown", "type_qid": "Q78651044", "pos": ""}, {"type": "organization", "name": "Teska Carson", "name_qid": "Unknown", "type_qid": "Q78651044", "pos": ""}, {"type": "event", "name": "Expressions of Interest", "name_qid": "Unknown", "type_qid": "Q100235738", "pos": ""}, {"type": "location", "name": "St Kilda", "name_qid": "Unknown", "type_qid": "Q66862439", "pos": ""}, {"type": "location", "name": "Tennyson Street", "name_qid": "Unknown", "type_qid": "Q66862439", "pos": ""}, {"type": "person", "name": "Larry Takis", "name_qid": "Unknown", "type_qid": "Q94648411", "pos": ""}]}
{"sentence": "It then uses the LAX Airport Tunnel to pass under its runways, then crosses under the light rail Los Angeles Metro Green Line and passes the western terminus of the Century Freeway (Interstate 105), as entering El Segundo and the South Bay region.", "one-stage": {"zero-shot": {"prompt": "class Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values\n\nclass Marriage(Event):\n\t\"\"\"\n\tDescription: The subject has the object as their spouse (husband, wife, partner, etc.).\n\tExamples: wife, married, husband, marriage, wedding, marry, couple, spouse, mistress, divorce, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"spouse\", \"location_of_ceremony\", \"type_of_union\", \"to\", \"from\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass OlympicAthleteAffiliation(Event):\n\t\"\"\"\n\tDescription: Sports teams or clubs that the subject represents or represented.\n\tExamples: together, partner, ogether, partnered, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"olympics\", \"athlete\", \"country\", \"sport\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\nclass MilitaryService(Event):\n\t\"\"\"\n\tDescription: Performing the service in the armed forces of a state.\n\tExamples: marine, soldier, service, sailor, commando, marines, airman, troop, arine, services, \n\t\"\"\"\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = [\"military_person\", \"to_date\", \"unit\", \"rank\", \"military_force\", \"from_date\"]\n\t\tsuper().__init__(trigger = trigger, arg_names = arg_names, *args)\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence.\n\"\"\"\nsentence = \"It then uses the LAX Airport Tunnel to pass under its runways, then crosses under the light rail Los Angeles Metro Green Line and passes the western terminus of the Century Freeway (Interstate 105), as entering El Segundo and the South Bay region.\"\n"}, "output": "results = []", "prompt_tokenized_length": 591}, "two-stage": {}, "events": []}
{"sentence": "She was born at Saint-Maximin-la-Sainte-Baume, the daughter of Lucien Bonaparte (1775–1840), the first prince of Canino and Musignano, and his first wife Christine Boyer (1773–1800), herself the daughter of Pierre Boyer.", "one-stage": {"zero-shot": {"prompt": "class Entity:\n\t\"\"\"\n\tThe base class for all entities.\n\t\"\"\"\n\tdef __init__(self, name: str):\n\t\tself.name = name\n\nclass Event:\n\t\"\"\"\n\tThe base class for all events.\n\t\"\"\"\n\tdef __init__(self, trigger: str):\n\t\tself.trigger = trigger\n\nclass Marriage(Event):\n\t\"\"\"\n\tDescription: The subject has the object as their spouse (husband, wife, partner, etc.).\n\t\"\"\"\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str, # Examples: wife, married, husband, marriage, wedding, marry, couple, spouse, mistress, divorce, \n\t\tspouse: List[ Entity ],\n\t\tlocation_of_ceremony: List[ Entity ],\n\t\ttype_of_union: List[ Entity ],\n\t\tto: List[ Entity ],\n\t\tfrom: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger = trigger)\n\t\tself.spouse = spouse\n\t\tself.location_of_ceremony = location_of_ceremony\n\t\tself.type_of_union = type_of_union\n\t\tself.to = to\n\t\tself.from = from\n\n\"\"\"\nThis is an object-oriented programming task: some Event Classes are defined above. Please instantiate all the corresponding Event Objects in the following sentence. It is important to note that the triggers of the events are confirmed as follows: \"wife\" is the trigger of event type \"Marriage\".\n\"\"\"\nsentence = \"She was born at Saint-Maximin-la-Sainte-Baume, the daughter of Lucien Bonaparte (1775–1840), the first prince of Canino and Musignano, and his first wife Christine Boyer (1773–1800), herself the daughter of Pierre Boyer.\"\n"}, "output": "results = [\n\tMarriage(trigger = \"wife\", spouse = [Entity(\"Lucien Bonaparte\"), Entity(\"Christine Boyer\")])\n]", "prompt_tokenized_length": 495}, "two-stage": {}, "events": [{"type": "Marriage", "trigger": "wife", "pos": [149, 153], "arguments": [{"role": "spouse", "type": "", "name": "Lucien Bonaparte", "pos": [63, 79]}, {"role": "spouse", "type": "", "name": "Christine Boyer", "pos": [154, 169]}], "code": "marriage_event1 = Marriage(\n\ttrigger = \"wife\",\n\tspouse = [\n\t\tEntity(\"Lucien Bonaparte\"),\n\t\tEntity(\"Christine Boyer\")\n\t]\n)", "type_id": "Unknown"}]}
