{
    "Event": "class Event:\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\tself.trigger = trigger\n\t\tself.arguments = {}\n\t\tfor arg_name, arg_values in zip(arg_names, args):\n\t\t\tself.arguments[arg_name] = arg_values",
    "Life": "class Life(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['place', 'person', 'instrument', 'agent', 'victim']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Movement": "class Movement(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['artifact', 'place', 'agent', 'vehicle', 'destination', 'origin', 'victim']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Transaction": "class Transaction(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['giver', 'artifact', 'place', 'seller', 'beneficiary', 'buyer', 'recipient']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Business": "class Business(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['organization', 'agent', 'place']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Conflict": "class Conflict(ParticipantIn):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['attacker', 'target', 'entity', 'place', 'instrument', 'agent', 'victim']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Contact": "class Contact(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['entity', 'place']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Personnel": "class Personnel(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['entity', 'place', 'person', 'agent']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Justice": "class Justice(Event):\n\tdef __init__(self, trigger: str, arg_names, *args):\n\t\targ_names = ['prosecutor', 'entity', 'place', 'person', 'plaintiff', 'adjudicator', 'agent', 'destination', 'defendant', 'origin']\n\t\tsuper().__init__(trigger, arg_names, *args)",
    "Phishing": "class Phishing(Event):\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = ['attack_pattern', 'attacker', 'damage_amount', 'place', 'purpose', 'time', 'tool', 'trusted_entity', 'victim']\n\t\tsuper().__init__(*args, trigger=trigger, arg_names=arg_names)",
    "Databreach": "class Databreach(Event):\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = ['attack_pattern', 'attacker', 'compromised_data', 'damage_amount', 'number_of_data', 'number_of_victim', 'place', 'purpose', 'time', 'tool', 'victim']\n\t\tsuper().__init__(*args, trigger=trigger, arg_names=arg_names)",
    "Ransom": "class Ransom(Event):\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = ['attack_pattern', 'attacker', 'damage_amount', 'payment_method', 'place', 'price', 'time', 'tool', 'victim']\n\t\tsuper().__init__(*args, trigger=trigger, arg_names=arg_names)",
    "DiscoverVulnerability": "class DiscoverVulnerability(Event):\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = ['capabilities', 'common_vulnerabilities_and_exposures', 'discoverer', 'supported_platform', 'time', 'vulnerability', 'vulnerable_system', 'vulnerable_system_owner', 'vulnerable_system_version']\n\t\tsuper().__init__(*args, trigger=trigger, arg_names=arg_names)",
    "PatchVulnerability": "class PatchVulnerability(Event):\n\tdef __init__(self, trigger: str, *args):\n\t\targ_names = ['common_vulnerabilities_and_exposures', 'issues_addressed', 'patch', 'patch_number', 'releaser', 'supported_platform', 'time', 'vulnerability', 'vulnerable_system', 'vulnerable_system_version']\n\t\tsuper().__init__(*args, trigger=trigger, arg_names=arg_names)"
}