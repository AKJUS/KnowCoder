{
    "Event": "class Event:\n\tdef __init__(self, trigger: str):\n\t\tself.trigger = trigger",
    "Acquit": "class Acquit(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant",
    "Appeal": "class Appeal(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tplaintiff: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.place = place\n\t\tself.plaintiff = plaintiff",
    "ArrestJailDetain": "class ArrestJailDetain(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.person = person\n\t\tself.place = place",
    "Attack": "class Attack(Conflict):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tattacker: List[ Entity ], \n\t\tinstrument: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\ttarget: List[ Entity ], \n\t\tvictim: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.attacker = attacker\n\t\tself.instrument = instrument\n\t\tself.place = place\n\t\tself.target = target\n\t\tself.victim = victim",
    "BeBorn": "class BeBorn(Life):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.person = person\n\t\tself.place = place",
    "ChargeIndict": "class ChargeIndict(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tprosecutor: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place\n\t\tself.prosecutor = prosecutor",
    "Convict": "class Convict(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place",
    "DeclareBankruptcy": "class DeclareBankruptcy(Business):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\torganization: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.organization = organization\n\t\tself.place = place",
    "Demonstrate": "class Demonstrate(Conflict):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.place = place",
    "Die": "class Die(Life):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tinstrument: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tvictim: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.instrument = instrument\n\t\tself.person = person\n\t\tself.place = place\n\t\tself.victim = victim",
    "Divorce": "class Divorce(Life):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.person = person\n\t\tself.place = place",
    "Elect": "class Elect(Personnel):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.person = person\n\t\tself.place = place",
    "EndOrganization": "class EndOrganization(Business):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\torganization: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.organization = organization\n\t\tself.place = place",
    "EndPosition": "class EndPosition(Personnel):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.person = person\n\t\tself.place = place",
    "Execute": "class Execute(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.person = person\n\t\tself.place = place",
    "Extradite": "class Extradite(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tdestination: List[ Entity ], \n\t\torigin: List[ Entity ], \n\t\tperson: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.destination = destination\n\t\tself.origin = origin\n\t\tself.person = person",
    "Fine": "class Fine(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tentity: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.entity = entity\n\t\tself.place = place",
    "Injure": "class Injure(Life):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tinstrument: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tvictim: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.instrument = instrument\n\t\tself.place = place\n\t\tself.victim = victim",
    "Marry": "class Marry(Life):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.person = person\n\t\tself.place = place",
    "Meet": "class Meet(Contact):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.place = place",
    "MergeOrganization": "class MergeOrganization(Business):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\torganization: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.organization = organization",
    "Nominate": "class Nominate(Personnel):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tperson: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.person = person",
    "Pardon": "class Pardon(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place",
    "PhoneWrite": "class PhoneWrite(Contact):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.place = place",
    "ReleaseParole": "class ReleaseParole(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.person = person\n\t\tself.place = place",
    "Sentence": "class Sentence(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place",
    "StartOrganization": "class StartOrganization(Business):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\torganization: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.organization = organization\n\t\tself.place = place",
    "StartPosition": "class StartPosition(Personnel):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tentity: List[ Entity ], \n\t\tperson: List[ Entity ], \n\t\tplace: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.entity = entity\n\t\tself.person = person\n\t\tself.place = place",
    "Sue": "class Sue(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tplaintiff: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place\n\t\tself.plaintiff = plaintiff",
    "TransferMoney": "class TransferMoney(Transaction):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tbeneficiary: List[ Entity ], \n\t\tgiver: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\trecipient: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.beneficiary = beneficiary\n\t\tself.giver = giver\n\t\tself.place = place\n\t\tself.recipient = recipient",
    "TransferOwnership": "class TransferOwnership(Transaction):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tartifact: List[ Entity ], \n\t\tbeneficiary: List[ Entity ], \n\t\tbuyer: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tseller: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.artifact = artifact\n\t\tself.beneficiary = beneficiary\n\t\tself.buyer = buyer\n\t\tself.place = place\n\t\tself.seller = seller",
    "Transportation": "class Transportation(Movement):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tagent: List[ Entity ], \n\t\tartifact: List[ Entity ], \n\t\tdestination: List[ Entity ], \n\t\torigin: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tvehicle: List[ Entity ], \n\t\tvictim: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.agent = agent\n\t\tself.artifact = artifact\n\t\tself.destination = destination\n\t\tself.origin = origin\n\t\tself.place = place\n\t\tself.vehicle = vehicle\n\t\tself.victim = victim",
    "TrialHearing": "class TrialHearing(Justice):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tadjudicator: List[ Entity ], \n\t\tdefendant: List[ Entity ], \n\t\tplace: List[ Entity ], \n\t\tprosecutor: List[ Entity ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.adjudicator = adjudicator\n\t\tself.defendant = defendant\n\t\tself.place = place\n\t\tself.prosecutor = prosecutor",
    "Databreach": "class Databreach(Event):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tattack_pattern: List[ Aptitude ], \n\t\tattacker: List[ Human ], \n\t\tcompromised_data: List[ PersonallyIdentifiableInformation ], \n\t\tdamage_amount: List[ Money ], \n\t\tnumber_of_data: List[ Number ], \n\t\tnumber_of_victim: List[ Number ], \n\t\tplace: List[ GeographicalSocialPolitical ], \n\t\tpurpose: List[ Goal ], \n\t\ttime: List[ Time ], \n\t\ttool: List[ ComputerFile | Malware ], \n\t\tvictim: List[ Human ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.attack_pattern = attack_pattern\n\t\tself.attacker = attacker\n\t\tself.compromised_data = compromised_data\n\t\tself.damage_amount = damage_amount\n\t\tself.number_of_data = number_of_data\n\t\tself.number_of_victim = number_of_victim\n\t\tself.place = place\n\t\tself.purpose = purpose\n\t\tself.time = time\n\t\tself.tool = tool\n\t\tself.victim = victim",
    "DiscoverVulnerability": "class DiscoverVulnerability(Event):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tcapabilities: List[ Aptitude ], \n\t\tcommon_vulnerabilities_and_exposures: List[ CommonVulnerabilitiesAndExposures ], \n\t\tdiscoverer: List[ Organization ], \n\t\tsupported_platform: List[ ComputerHardware | ComputerSystem ], \n\t\ttime: List[ Time ], \n\t\tvulnerability: List[ Vulnerability ], \n\t\tvulnerable_system: List[ ComputerSystem ], \n\t\tvulnerable_system_owner: List[ Organization ], \n\t\tvulnerable_system_version: List[ SoftwareVersion ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.capabilities = capabilities\n\t\tself.common_vulnerabilities_and_exposures = common_vulnerabilities_and_exposures\n\t\tself.discoverer = discoverer\n\t\tself.supported_platform = supported_platform\n\t\tself.time = time\n\t\tself.vulnerability = vulnerability\n\t\tself.vulnerable_system = vulnerable_system\n\t\tself.vulnerable_system_owner = vulnerable_system_owner\n\t\tself.vulnerable_system_version = vulnerable_system_version",
    "PatchVulnerability": "class PatchVulnerability(Event):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tcommon_vulnerabilities_and_exposures: List[ CommonVulnerabilitiesAndExposures ], \n\t\tissues_addressed: List[ Aptitude ], \n\t\tpatch: List[ Patch ], \n\t\tpatch_number: List[ SoftwareVersion ], \n\t\treleaser: List[ Organization ], \n\t\tsupported_platform: List[ ComputerHardware | ComputerSystem ], \n\t\ttime: List[ Time ], \n\t\tvulnerability: List[ Vulnerability ], \n\t\tvulnerable_system: List[ ComputerSystem ], \n\t\tvulnerable_system_version: List[ SoftwareVersion ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.common_vulnerabilities_and_exposures = common_vulnerabilities_and_exposures\n\t\tself.issues_addressed = issues_addressed\n\t\tself.patch = patch\n\t\tself.patch_number = patch_number\n\t\tself.releaser = releaser\n\t\tself.supported_platform = supported_platform\n\t\tself.time = time\n\t\tself.vulnerability = vulnerability\n\t\tself.vulnerable_system = vulnerable_system\n\t\tself.vulnerable_system_version = vulnerable_system_version",
    "Phishing": "class Phishing(Event):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tattack_pattern: List[ Aptitude ], \n\t\tattacker: List[ Human ], \n\t\tdamage_amount: List[ Money ], \n\t\tplace: List[ GeographicalSocialPolitical ], \n\t\tpurpose: List[ Goal ], \n\t\ttime: List[ Time ], \n\t\ttool: List[ ComputerFile | Malware ], \n\t\ttrusted_entity: List[ ComputerFile ], \n\t\tvictim: List[ Human ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.attack_pattern = attack_pattern\n\t\tself.attacker = attacker\n\t\tself.damage_amount = damage_amount\n\t\tself.place = place\n\t\tself.purpose = purpose\n\t\tself.time = time\n\t\tself.tool = tool\n\t\tself.trusted_entity = trusted_entity\n\t\tself.victim = victim",
    "Ransom": "class Ransom(Event):\n\tdef __init__(\n\t\tself,\n\t\ttrigger: str,\n\t\tattack_pattern: List[ Aptitude ], \n\t\tattacker: List[ Human ], \n\t\tdamage_amount: List[ Money ], \n\t\tpayment_method: List[ PaymentMethod ], \n\t\tplace: List[ GeographicalSocialPolitical ], \n\t\tprice: List[ Money ], \n\t\ttime: List[ Time ], \n\t\ttool: List[ ComputerFile | Malware ], \n\t\tvictim: List[ Human ]\n\t):\n\t\tsuper().__init__(trigger=trigger)\n\t\tself.attack_pattern = attack_pattern\n\t\tself.attacker = attacker\n\t\tself.damage_amount = damage_amount\n\t\tself.payment_method = payment_method\n\t\tself.place = place\n\t\tself.price = price\n\t\tself.time = time\n\t\tself.tool = tool\n\t\tself.victim = victim"
}